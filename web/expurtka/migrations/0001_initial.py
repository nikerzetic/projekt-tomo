# Generated by Django 5.0.4 on 2024-05-27 14:27

import re

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import expurtka.putka.wiki_helpers
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Contest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50, verbose_name="Title")),
                (
                    "url",
                    models.SlugField(
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[a-z0-9]+(?:-[a-z0-9]+)*\\Z"),
                                'Enter a valid "slug" consisting of lowercase letters and numbers, separated by hyphens, e.g. "sample-task-name".',
                            )
                        ],
                        verbose_name="URL",
                    ),
                ),
                ("scheduled_start", models.DateTimeField(verbose_name="Start time")),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Duration of the contest in minutes.",
                        null=True,
                        verbose_name="Duration",
                    ),
                ),
                (
                    "autostart",
                    models.BooleanField(
                        default=False,
                        help_text="Start the contest automatically at the specified time.",
                        verbose_name="Autostart",
                    ),
                ),
                (
                    "live_results",
                    models.BooleanField(
                        help_text="Display current scoreboard to contestants during the contest.",
                        verbose_name="Live results",
                    ),
                ),
                (
                    "auditable_results",
                    models.BooleanField(
                        default=False,
                        help_text="Show submissions to everyone after the contest.",
                        verbose_name="Auditable results",
                    ),
                ),
                (
                    "public_testdata",
                    models.BooleanField(
                        default=False,
                        help_text="Enable downloading test data zips after the contest.",
                        verbose_name="Public test data",
                    ),
                ),
                (
                    "scoring_type",
                    models.IntegerField(
                        choices=[(1, "Putka Classic"), (2, "UPM"), (3, "RTK")],
                        verbose_name="Scoring type",
                    ),
                ),
                (
                    "freeze_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="How many minutes before the end of the contest the scoreboard should freeze. Scoreboard-default behaviour if empty.",
                        null=True,
                        verbose_name="Freeze minutes",
                    ),
                ),
                ("public", models.BooleanField(default=False, verbose_name="Public")),
                ("actual_start", models.DateTimeField(blank=True, null=True)),
                ("actual_end", models.DateTimeField(blank=True, null=True)),
                (
                    "published",
                    models.BooleanField(default=False, verbose_name="Published"),
                ),
            ],
            options={
                "verbose_name": "Contest",
                "verbose_name_plural": "Contests",
                "ordering": ["scheduled_start", "title"],
            },
        ),
        migrations.CreateModel(
            name="ContestGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50, verbose_name="Title")),
                (
                    "url",
                    models.SlugField(
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[a-z0-9]+(?:-[a-z0-9]+)*\\Z"),
                                'Enter a valid "slug" consisting of lowercase letters and numbers, separated by hyphens, e.g. "sample-task-name".',
                            )
                        ],
                        verbose_name="URL",
                    ),
                ),
                (
                    "scoring_type",
                    models.IntegerField(
                        choices=[(1, "Administrative group only"), (2, "UPM")],
                        verbose_name="Scoring type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contest group",
                "verbose_name_plural": "Contest groups",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=150, unique=True, verbose_name="name"),
                ),
            ],
            options={
                "verbose_name": "group",
                "verbose_name_plural": "groups",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        help_text="The groups this user belongs to.",
                        related_name="users",
                        to="expurtka.group",
                        verbose_name="Groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="StaticScoreboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("metadata", models.TextField()),
                ("data", models.TextField()),
                ("last_hint", models.TextField(null=True)),
            ],
            options={
                "verbose_name": "Static scoreboard",
                "verbose_name_plural": "Static scoreboards",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.SlugField(
                        help_text="Tag name as displayed to the user. Separated with dashes and usually not capitalized. Currently not translatable.",
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[a-z0-9]+(?:-[a-z0-9]+)*\\Z"),
                                'Enter a valid "slug" consisting of lowercase letters and numbers, separated by hyphens, e.g. "sample-task-name".',
                            )
                        ],
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Describe which type of tasks this tag represents. You can specify what tasks do and what tasks don't belong under this tag.",
                        verbose_name="Description",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "db_table": "ui_core_tasks_tag",
            },
        ),
        migrations.CreateModel(
            name="UntabledItem",
            fields=[
                (
                    "key",
                    models.CharField(
                        db_index=True, max_length=128, primary_key=True, serialize=False
                    ),
                ),
                ("value", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ContestGroupMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "round_type",
                    models.IntegerField(
                        choices=[(1, "Practice"), (2, "Regular"), (3, "Finale")],
                        verbose_name="Round type",
                    ),
                ),
                (
                    "contest",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="expurtka.contest",
                        verbose_name="Contest",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="expurtka.contestgroup",
                        verbose_name="Contest group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contest round",
                "verbose_name_plural": "Contest rounds",
            },
        ),
        migrations.AddField(
            model_name="contestgroup",
            name="rounds",
            field=models.ManyToManyField(
                related_name="contest_groups",
                through="expurtka.ContestGroupMembership",
                to="expurtka.contest",
            ),
        ),
        migrations.CreateModel(
            name="GroupObjectPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("manage", models.BooleanField()),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operms",
                        to="expurtka.group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Group object permission",
                "verbose_name_plural": "Group object permissions",
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="expurtka.user",
                    ),
                ),
                ("lang", models.CharField(max_length=2, verbose_name="language")),
                ("country", models.CharField(max_length=2, verbose_name="country")),
                (
                    "birthday",
                    models.DateField(blank=True, null=True, verbose_name="birthday"),
                ),
                (
                    "school",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="school"
                    ),
                ),
                (
                    "graduation_year",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="graduation year"
                    ),
                ),
                (
                    "forum_notify",
                    models.IntegerField(
                        choices=[
                            (0, "Never."),
                            (
                                1,
                                "On new posts in threads in which I recently posted myself.",
                            ),
                            (
                                2,
                                "On new posts addressed to me and on new posts in threads about tasks I recently attempted, threads about tasks from my recent contests, and threads in which I recently posted.",
                            ),
                            (100, "On every new post."),
                        ],
                        default=2,
                    ),
                ),
                ("onsite_ip", models.CharField(blank=True, max_length=39, null=True)),
                (
                    "mentor",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="mentor"
                    ),
                ),
            ],
            options={
                "verbose_name": "Profile",
                "verbose_name_plural": "Profiles",
            },
        ),
        migrations.CreateModel(
            name="Contestant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("disqualified", models.BooleanField(default=False)),
                (
                    "contest",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="expurtka.contest",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="expurtka.user"
                    ),
                ),
            ],
            options={
                "verbose_name": "Contestant",
                "verbose_name_plural": "Contestants",
            },
        ),
        migrations.AddField(
            model_name="contest",
            name="contestants",
            field=models.ManyToManyField(
                related_name="contests",
                through="expurtka.Contestant",
                to="expurtka.user",
            ),
        ),
        migrations.CreateModel(
            name="Content",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                ("lang", models.CharField(max_length=2, verbose_name="Language")),
                (
                    "title",
                    models.CharField(
                        default="untitled", max_length=50, verbose_name="Title"
                    ),
                ),
                ("content", models.TextField()),
                ("version", models.PositiveIntegerField(default=1)),
                ("last_edit_time", models.DateTimeField(auto_now=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="expurtka.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Content",
                "verbose_name_plural": "Contents",
            },
        ),
        migrations.CreateModel(
            name="Alert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Activity in a forum thread"),
                            (2, "An upload needs manual grading"),
                            (3, "Uploaded source contains suspicious code"),
                            (4, "An upload caused an internal error"),
                        ],
                        verbose_name="Alert type",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                ("perms_checked", models.BooleanField(default=False)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who should be shown the alert.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="expurtka.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert",
                "verbose_name_plural": "Alerts",
            },
        ),
        migrations.CreateModel(
            name="Set",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50, verbose_name="Title")),
                (
                    "url",
                    models.SlugField(
                        help_text="Url of this set. Must be unique within the parent set.",
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[a-z0-9]+(?:-[a-z0-9]+)*\\Z"),
                                'Enter a valid "slug" consisting of lowercase letters and numbers, separated by hyphens, e.g. "sample-task-name".',
                            )
                        ],
                        verbose_name="URL",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="You can use Markdown such as *...* or `...` and LaTeX with $...$.'",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        default=False,
                        help_text="This set will be visible to all users, even if not logged in.",
                        verbose_name="Public",
                    ),
                ),
                ("sort", models.PositiveIntegerField()),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="child_sets",
                        to="expurtka.set",
                        verbose_name="Parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Set",
                "verbose_name_plural": "Sets",
                "db_table": "ui_core_tasks_set",
            },
        ),
        migrations.AddField(
            model_name="contest",
            name="set",
            field=models.ForeignKey(
                help_text="The set with tasks for this contest.",
                on_delete=django.db.models.deletion.PROTECT,
                to="expurtka.set",
                verbose_name="Set",
            ),
        ),
        migrations.AddField(
            model_name="contestgroup",
            name="scoreboard",
            field=models.OneToOneField(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="contest_group",
                to="expurtka.staticscoreboard",
            ),
        ),
        migrations.AddField(
            model_name="contest",
            name="scoreboard",
            field=models.OneToOneField(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="contest",
                to="expurtka.staticscoreboard",
            ),
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url",
                    models.SlugField(
                        help_text="Preferably contains letters, numbers and dashes, but can be any slug. It must be globally unique.",
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[a-z0-9]+(?:-[a-z0-9]+)*\\Z"),
                                'Enter a valid "slug" consisting of lowercase letters and numbers, separated by hyphens, e.g. "sample-task-name".',
                            )
                        ],
                        verbose_name="URL",
                    ),
                ),
                (
                    "author",
                    models.CharField(
                        blank=True,
                        help_text='The "Author (Contest)" syntax may be used to specify the task source or the original contest it appeared in.',
                        max_length=50,
                        null=True,
                        verbose_name="Author",
                    ),
                ),
                (
                    "evaluation_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Server evaluation"),
                            (2, "Local evaluation"),
                            (3, "Manual evaluation"),
                        ],
                        help_text="Determines how the submitted solution will be evaluated.",
                        verbose_name="Evaluation type",
                    ),
                ),
                (
                    "difficulty",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "Very easy"),
                            (20, "Easy"),
                            (30, "Easy-Medium"),
                            (40, "Medium"),
                            (50, "Medium-Hard"),
                            (60, "Hard"),
                            (70, "Very hard"),
                            (None, "Unspecified"),
                        ],
                        default=None,
                        help_text="Estimated task difficulty as intended by the author.",
                        null=True,
                        verbose_name="Difficulty",
                    ),
                ),
                ("testscript", models.TextField()),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Add all applicable tags. Always try to add at least one tag. You can create a new one, if really needed.",
                        to="expurtka.tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task",
                "verbose_name_plural": "Tasks",
                "db_table": "ui_core_tasks_task",
            },
            bases=(expurtka.putka.wiki_helpers.ContentManagementMixin, models.Model),
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("filename", models.CharField(max_length=50, verbose_name="Filename")),
                (
                    "type",
                    models.IntegerField(
                        choices=[
                            (-3, "Helper files for testing"),
                            (-2, "Test inputs/outputs"),
                            (2, "Images"),
                            (3, "Sample inputs/outputs"),
                            (4, "Other public data"),
                        ],
                        default=None,
                        verbose_name="Attachment type",
                    ),
                ),
                ("data", models.BinaryField(verbose_name="Data")),
                (
                    "md5",
                    models.CharField(
                        default="deadbeef", max_length=32, verbose_name="MD5 hash"
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="expurtka.task",
                        verbose_name="Task",
                    ),
                ),
            ],
            options={
                "verbose_name": "File",
                "verbose_name_plural": "Files",
                "db_table": "ui_core_tasks_file",
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="TaskLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sort", models.PositiveIntegerField()),
                (
                    "parent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="expurtka.set",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="expurtka.task",
                    ),
                ),
            ],
            options={
                "db_table": "ui_core_tasks_tasklink",
            },
        ),
        migrations.AddField(
            model_name="task",
            name="parents",
            field=models.ManyToManyField(
                related_name="tasks", through="expurtka.TaskLink", to="expurtka.set"
            ),
        ),
        migrations.CreateModel(
            name="Upload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lang",
                    models.IntegerField(
                        choices=[
                            (100, "(Auto)"),
                            (0, "text"),
                            (1, "C"),
                            (2, "C++"),
                            (3, "Pascal"),
                            (4, "Java"),
                            (5, "Python 2"),
                            (8, "Py 3"),
                            (6, "Perl"),
                            (7, "C#"),
                            (9, "Prolog (SWI)"),
                            (10, "Ruby"),
                            (11, "Rust"),
                            (12, "Kotlin"),
                            (13, "Go"),
                        ]
                    ),
                ),
                ("filename", models.TextField()),
                ("source", models.BinaryField()),
                (
                    "upload_time",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Waiting"),
                            (2, "Testing"),
                            (3, "Done"),
                            (4, "Internal error"),
                            (5, "Manual Inspection"),
                        ],
                        default=1,
                    ),
                ),
                ("mgr_status", models.IntegerField(blank=True, default=-1, null=True)),
                (
                    "preparation_status",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "OK"),
                            (2, "Exit/RunTime Error"),
                            (3, "Time Limit Exceeded"),
                            (4, "Memory Limit Exceeded"),
                            (5, "Output Size Limit Exceeded"),
                            (6, "Thread Count Limit Exceeded"),
                            (7, "Illegal System Call"),
                            (8, "Nonzero Exit Code"),
                            (9, "Wrong Answer"),
                            (10, "Presentation Error"),
                        ],
                        null=True,
                    ),
                ),
                ("preparation_output", models.BinaryField(blank=True, null=True)),
                ("system_output", models.BinaryField(blank=True, null=True)),
                (
                    "tester_signature",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("points", models.IntegerField(blank=True, null=True)),
                ("max_points", models.IntegerField(blank=True, null=True)),
                (
                    "agg_status",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "OK"),
                            (2, "Exit/RunTime Error"),
                            (3, "Time Limit Exceeded"),
                            (4, "Memory Limit Exceeded"),
                            (5, "Output Size Limit Exceeded"),
                            (6, "Thread Count Limit Exceeded"),
                            (7, "Illegal System Call"),
                            (8, "Nonzero Exit Code"),
                            (9, "Wrong Answer"),
                            (10, "Presentation Error"),
                        ],
                        null=True,
                    ),
                ),
                ("reviewer_comment", models.TextField(blank=True, null=True)),
                ("is_official_solution", models.BooleanField(default=False)),
                (
                    "reviewer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed",
                        to="expurtka.user",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="expurtka.task"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="expurtka.user"
                    ),
                ),
            ],
            options={
                "ordering": ["-upload_time"],
            },
        ),
        migrations.CreateModel(
            name="TestCase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "run_status",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "OK"),
                            (2, "Exit/RunTime Error"),
                            (3, "Time Limit Exceeded"),
                            (4, "Memory Limit Exceeded"),
                            (5, "Output Size Limit Exceeded"),
                            (6, "Thread Count Limit Exceeded"),
                            (7, "Illegal System Call"),
                            (8, "Nonzero Exit Code"),
                            (9, "Wrong Answer"),
                            (10, "Presentation Error"),
                        ],
                        null=True,
                    ),
                ),
                ("time", models.FloatField(blank=True, null=True)),
                ("memory", models.FloatField(blank=True, null=True)),
                ("tasks", models.IntegerField(blank=True, null=True)),
                ("exit_code", models.IntegerField(blank=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Input filename (by convention) or another descriptive name",
                        max_length=100,
                    ),
                ),
                ("points", models.IntegerField()),
                ("max_points", models.IntegerField()),
                ("user_output", models.BinaryField(blank=True, null=True)),
                (
                    "user_output_line",
                    models.IntegerField(
                        blank=True,
                        help_text="Line number of the user output file where to begin showing the data diff.",
                        null=True,
                    ),
                ),
                ("official_output", models.BinaryField(blank=True, null=True)),
                (
                    "official_output_line",
                    models.IntegerField(
                        blank=True,
                        help_text="Line number of the official output file where to begin showing the data diff.",
                        null=True,
                    ),
                ),
                ("user_stderr", models.BinaryField(blank=True, null=True)),
                (
                    "upload",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="expurtka.upload",
                    ),
                ),
            ],
            options={
                "verbose_name": "Test case",
                "verbose_name_plural": "Test cases",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ContestUpload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("disqualified", models.BooleanField(default=False)),
                (
                    "contest",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="expurtka.contest",
                    ),
                ),
                (
                    "upload",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="expurtka.upload",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contest upload",
                "verbose_name_plural": "Contest uploads",
            },
        ),
        migrations.AddField(
            model_name="contest",
            name="uploads",
            field=models.ManyToManyField(
                related_name="contests",
                through="expurtka.ContestUpload",
                to="expurtka.upload",
            ),
        ),
        migrations.CreateModel(
            name="UserObjectPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("manage", models.BooleanField()),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operms",
                        to="expurtka.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "User object permission",
                "verbose_name_plural": "User object permissions",
            },
        ),
        migrations.CreateModel(
            name="UserTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lang",
                    models.IntegerField(
                        choices=[
                            (100, "(Auto)"),
                            (0, "text"),
                            (1, "C"),
                            (2, "C++"),
                            (3, "Pascal"),
                            (4, "Java"),
                            (5, "Python 2"),
                            (8, "Py 3"),
                            (6, "Perl"),
                            (7, "C#"),
                            (9, "Prolog (SWI)"),
                            (10, "Ruby"),
                            (11, "Rust"),
                            (12, "Kotlin"),
                            (13, "Go"),
                        ]
                    ),
                ),
                ("filename", models.TextField()),
                ("source", models.BinaryField()),
                (
                    "upload_time",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Waiting"),
                            (2, "Testing"),
                            (3, "Done"),
                            (4, "Internal error"),
                            (5, "Manual Inspection"),
                        ],
                        default=1,
                    ),
                ),
                ("mgr_status", models.IntegerField(blank=True, default=-1, null=True)),
                (
                    "preparation_status",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "OK"),
                            (2, "Exit/RunTime Error"),
                            (3, "Time Limit Exceeded"),
                            (4, "Memory Limit Exceeded"),
                            (5, "Output Size Limit Exceeded"),
                            (6, "Thread Count Limit Exceeded"),
                            (7, "Illegal System Call"),
                            (8, "Nonzero Exit Code"),
                            (9, "Wrong Answer"),
                            (10, "Presentation Error"),
                        ],
                        null=True,
                    ),
                ),
                ("preparation_output", models.BinaryField(blank=True, null=True)),
                ("system_output", models.BinaryField(blank=True, null=True)),
                (
                    "tester_signature",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "run_status",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "OK"),
                            (2, "Exit/RunTime Error"),
                            (3, "Time Limit Exceeded"),
                            (4, "Memory Limit Exceeded"),
                            (5, "Output Size Limit Exceeded"),
                            (6, "Thread Count Limit Exceeded"),
                            (7, "Illegal System Call"),
                            (8, "Nonzero Exit Code"),
                            (9, "Wrong Answer"),
                            (10, "Presentation Error"),
                        ],
                        null=True,
                    ),
                ),
                ("time", models.FloatField(blank=True, null=True)),
                ("memory", models.FloatField(blank=True, null=True)),
                ("tasks", models.IntegerField(blank=True, null=True)),
                ("exit_code", models.IntegerField(blank=True, null=True)),
                ("user_input", models.BinaryField()),
                ("user_output", models.BinaryField(blank=True, null=True)),
                ("user_stderr", models.BinaryField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="expurtka.user"
                    ),
                ),
            ],
            options={
                "ordering": ["-upload_time"],
            },
        ),
        migrations.AddConstraint(
            model_name="contestgroupmembership",
            constraint=models.UniqueConstraint(
                fields=("contest", "group"),
                name="expurtka_contestgroupmembership_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="groupobjectpermission",
            constraint=models.UniqueConstraint(
                fields=("group", "manage", "content_type", "object_id"),
                name="expurtka_groupobjectpermission_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="contestant",
            constraint=models.UniqueConstraint(
                fields=("contest", "user"), name="expurtka_contestant_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="alert",
            constraint=models.UniqueConstraint(
                fields=("user", "type", "content_type", "object_id"),
                name="unique_alert",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="file",
            unique_together={("task", "filename")},
        ),
        migrations.AddConstraint(
            model_name="tasklink",
            constraint=models.UniqueConstraint(
                fields=("parent", "task"), name="expurtka_tasklink_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="contestupload",
            constraint=models.UniqueConstraint(
                fields=("contest", "upload"), name="expurtka_contestupload_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="userobjectpermission",
            constraint=models.UniqueConstraint(
                fields=("user", "manage", "content_type", "object_id"),
                name="expurtka_userobjectpermission_unique",
            ),
        ),
    ]
